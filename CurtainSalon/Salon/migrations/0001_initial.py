# Generated by Django 4.2.5 on 2023-11-14 19:13

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Discounts',
            fields=[
                ('discount_id', models.AutoField(primary_key=True, serialize=False)),
                ('name_discount', models.CharField(max_length=100, verbose_name='Название скидки')),
                ('percent', models.IntegerField(verbose_name='Процент')),
            ],
            options={
                'verbose_name': 'Скидки',
                'verbose_name_plural': 'Скидки',
                'db_table': 'discounts',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('inventory_id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'verbose_name': 'Инвентаризация',
                'verbose_name_plural': 'Инвентаризация',
                'db_table': 'inventory',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Orders',
            fields=[
                ('order_id', models.AutoField(primary_key=True, serialize=False)),
                ('date_order', models.DateField(verbose_name='Дата заказа')),
                ('status_order', models.BooleanField(verbose_name='Статус заказа')),
                ('total_cost', models.FloatField(verbose_name='Общая стоимость')),
            ],
            options={
                'verbose_name': 'Заказы',
                'verbose_name_plural': 'Заказы',
                'db_table': 'orders',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Posts',
            fields=[
                ('post_id', models.AutoField(primary_key=True, serialize=False)),
                ('name_post', models.CharField(max_length=50, verbose_name='Должность')),
                ('salary', models.IntegerField(verbose_name='Оклад')),
            ],
            options={
                'verbose_name': 'Должности',
                'verbose_name_plural': 'Должности',
                'db_table': 'posts',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('product_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, verbose_name='Название')),
                ('price', models.IntegerField(verbose_name='Цена')),
                ('country_producer', models.CharField(blank=True, max_length=100, null=True, verbose_name='Страна производитель')),
                ('description', models.CharField(max_length=300, verbose_name='Описание')),
                ('size', models.FloatField(verbose_name='Размер')),
                ('color', models.CharField(max_length=50, verbose_name='Цвет')),
                ('photo', models.CharField(max_length=255, verbose_name='Фото')),
            ],
            options={
                'verbose_name': 'Продукция',
                'verbose_name_plural': 'Продукция',
                'db_table': 'product',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ProductType',
            fields=[
                ('product_type_id', models.AutoField(primary_key=True, serialize=False)),
                ('name_product_type', models.CharField(max_length=50, verbose_name='Тип продукции')),
            ],
            options={
                'verbose_name': 'Тип продукции',
                'verbose_name_plural': 'Тип продукции',
                'db_table': 'product_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Roles',
            fields=[
                ('role_id', models.AutoField(primary_key=True, serialize=False)),
                ('name_role', models.CharField(max_length=100, verbose_name='Роль')),
            ],
            options={
                'verbose_name': 'Роли',
                'verbose_name_plural': 'Роли',
                'db_table': 'roles',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Services',
            fields=[
                ('service_id', models.AutoField(primary_key=True, serialize=False)),
                ('name_service', models.CharField(max_length=50, verbose_name='Услга')),
            ],
            options={
                'verbose_name': 'Услуги',
                'verbose_name_plural': 'Услуги',
                'db_table': 'services',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='StructureDelivery',
            fields=[
                ('structure_delivery_id', models.AutoField(primary_key=True, serialize=False)),
                ('number_products', models.IntegerField(verbose_name='Количество продукции')),
                ('date_delivery', models.DateField(verbose_name='Дата поставки')),
            ],
            options={
                'verbose_name': 'Состав поставки',
                'verbose_name_plural': 'Состав поставки',
                'db_table': 'structure_delivery',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_id', models.AutoField(primary_key=True, serialize=False)),
                ('surname', models.CharField(max_length=50, verbose_name='Фамилия')),
                ('name', models.CharField(max_length=50, verbose_name='Имя')),
                ('patronymic', models.CharField(blank=True, max_length=50, null=True, verbose_name='Отчество')),
                ('date_birth', models.DateField(verbose_name='Дата рождения')),
                ('photo', models.CharField(blank=True, max_length=255, null=True, verbose_name='Фото')),
                ('telephone', models.CharField(max_length=12, verbose_name='Телефон')),
                ('email', models.CharField(max_length=50, verbose_name='Почта')),
                ('street', models.CharField(max_length=50, verbose_name='Улица')),
                ('house', models.IntegerField(verbose_name='Дом')),
                ('floor', models.IntegerField(blank=True, null=True, verbose_name='Этаж')),
                ('name_company', models.CharField(blank=True, max_length=50, null=True, verbose_name='Назавние компании')),
                ('password', models.CharField(max_length=12, verbose_name='Пароль')),
            ],
            options={
                'verbose_name': 'Пользователиcd',
                'verbose_name_plural': 'Пользователи',
                'db_table': 'users',
                'managed': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
